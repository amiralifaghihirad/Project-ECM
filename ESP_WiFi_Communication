/*
 * ESP WiFi Communication Module
 * Version: 1.2 (Optimized)
 * Author: Amir Saleh
 * Description: Enhanced WiFi connection and data transmission handling
 * Improvements:
 * - Better AT command response handling
 * - Improved error management
 * - Proper connection state verification
 * - Enhanced timeout handling
 * - Better buffer management
 */

#include <Arduino.h>

// Network credentials
const char* ssid = "YourSSID";
const char* password = "YourPassword";

// Server configuration
const char* server = "192.168.1.100";
const int port = 80;

// Structure for sensor data
struct SensorData {
  int gas;
  int temp;
  int sensor3;
};

// Timeout settings
const unsigned long AT_TIMEOUT = 5000;        // 5 seconds for AT commands
const unsigned long WIFI_CONNECT_TIMEOUT = 30000; // 30 seconds for WiFi
const unsigned long TCP_CONNECT_TIMEOUT = 10000;  // 10 seconds for TCP
const unsigned long DATA_SEND_TIMEOUT = 8000;     // 8 seconds for data send

// Buffer sizes
const int MAX_RESPONSE_LENGTH = 512;
const int MAX_CMD_LENGTH = 128;
const int MAX_PAYLOAD_LENGTH = 256;

/**
 * Send AT command and wait for expected response
 * @param cmd AT command to send
 * @param expectedResponse Expected response string
 * @param timeout Timeout in milliseconds
 * @return true if expected response received, false otherwise
 */
bool sendATCommand(const char* cmd, const char* expectedResponse = "OK", 
                  unsigned long timeout = AT_TIMEOUT) {
  Serial.print("Sending: ");
  Serial.println(cmd);
  
  // Clear serial buffer
  while(Serial1.available()) Serial1.read();
  
  Serial1.println(cmd);
  
  unsigned long startTime = millis();
  String response = "";
  bool responseComplete = false;
  
  while (millis() - startTime < timeout && !responseComplete) {
    while (Serial1.available()) {
      char c = Serial1.read();
      response += c;
      Serial.write(c); // Echo to serial monitor
      
      // Prevent buffer overflow
      if (response.length() > MAX_RESPONSE_LENGTH) {
        response = response.substring(response.length() - MAX_RESPONSE_LENGTH);
      }
      
      // Check for expected response
      if (response.indexOf(expectedResponse) != -1) {
        responseComplete = true;
        break;
      }
      
      // Check for common error responses
      if (response.indexOf("ERROR") != -1 || 
          response.indexOf("FAIL") != -1) {
        Serial.println("Command failed");
        return false;
      }
    }
  }
  
  if (!responseComplete) {
    Serial.print("Timeout waiting for: ");
    Serial.println(expectedResponse);
    Serial.println("Received:");
    Serial.println(response);
    return false;
  }
  
  return true;
}

/**
 * Connect to WiFi network
 * @return true if connected successfully, false otherwise
 */
bool setupWiFi() {
  Serial.println("Initializing ESP module...");
  
  // Reset module (optional)
  if (!sendATCommand("AT+RST", "ready", 5000)) {
    Serial.println("Module reset failed");
    return false;
  }
  delay(1000);
  
  // Check if module is responsive
  if (!sendATCommand("AT")) {
    Serial.println("Module not responding");
    return false;
  }
  
  // Set WiFi mode to station (client)
  if (!sendATCommand("AT+CWMODE=1")) {
    Serial.println("Failed to set WiFi mode");
    return false;
  }
  
  // Connect to WiFi network
  char connectCmd[MAX_CMD_LENGTH];
  snprintf(connectCmd, sizeof(connectCmd), "AT+CWJAP=\"%s\",\"%s\"", ssid, password);
  
  if (!sendATCommand(connectCmd, "OK", WIFI_CONNECT_TIMEOUT)) {
    Serial.println("Failed to connect to WiFi");
    return false;
  }
  
  // Verify connection status
  if (!sendATCommand("AT+CIPSTATUS", "STATUS:3", 3000)) {
    Serial.println("WiFi connected but no IP");
    return false;
  }
  
  // Get IP address (for debugging)
  sendATCommand("AT+CIFSR");
  
  return true;
}

/**
 * Send sensor data to server
 * @param data SensorData structure containing sensor readings
 * @return true if data sent successfully, false otherwise
 */
bool sendDataToServer(const SensorData &data) {
  // Start TCP connection
  char tcpCmd[MAX_CMD_LENGTH];
  snprintf(tcpCmd, sizeof(tcpCmd), "AT+CIPSTART=\"TCP\",\"%s\",%d", server, port);
  
  if (!sendATCommand(tcpCmd, "OK", TCP_CONNECT_TIMEOUT)) {
    Serial.println("Failed to establish TCP connection");
    return false;
  }
  
  // Verify connection status
  if (!sendATCommand("AT+CIPSTATUS", "STATUS:4", 3000)) {
    Serial.println("TCP connection not properly established");
    sendATCommand("AT+CIPCLOSE"); // Clean up
    return false;
  }
  
  // Prepare HTTP GET request
  char payload[MAX_PAYLOAD_LENGTH];
  snprintf(payload, sizeof(payload), 
           "GET /log?gas=%d&temp=%d&s3=%d HTTP/1.1\r\nHost: %s\r\n\r\n", 
           data.gas, data.temp, data.sensor3, server);
  
  // Send payload length
  char sendCmd[MAX_CMD_LENGTH];
  snprintf(sendCmd, sizeof(sendCmd), "AT+CIPSEND=%d", strlen(payload));
  
  if (!sendATCommand(sendCmd, ">", 2000)) {
    Serial.println("Failed to prepare data transmission");
    sendATCommand("AT+CIPCLOSE"); // Clean up
    return false;
  }
  
  // Send actual payload
  Serial1.print(payload);
  
  // Wait for response
  unsigned long startTime = millis();
  String response = "";
  bool sendOk = false;
  
  while (millis() - startTime < DATA_SEND_TIMEOUT) {
    while (Serial1.available()) {
      char c = Serial1.read();
      response += c;
      Serial.write(c);
      
      if (response.indexOf("SEND OK") != -1) {
        sendOk = true;
        break;
      }
      
      // Check for errors
      if (response.indexOf("ERROR") != -1 || 
          response.indexOf("FAIL") != -1) {
        Serial.println("Error in data transmission");
        sendATCommand("AT+CIPCLOSE"); // Clean up
        return false;
      }
    }
    
    if (sendOk) break;
  }
  
  // Close connection after sending
  sendATCommand("AT+CIPCLOSE");
  
  if (!sendOk) {
    Serial.println("Data transmission timeout");
    return false;
  }
  
  return true;
}

void setup() {
  // Initialize serial communication
  Serial.begin(115200);
  Serial1.begin(115200);
  
  delay(1000); // Wait for serial ports to initialize
  
  Serial.println("Starting WiFi communication...");
  
  if (!setupWiFi()) {
    Serial.println("Critical: Failed to initialize WiFi");
    while(1); // Halt if WiFi connection fails
  }
}

void loop() {
  static unsigned long lastSendTime = 0;
  
  if (millis() - lastSendTime > 5000) { // Send data every 5 seconds
    SensorData data = {
      .gas = analogRead(A0),
      .temp = analogRead(A1),
      .sensor3 = analogRead(A2)
    };
    
    if (!sendDataToServer(data)) {
      Serial.println("Warning: Failed to send data to server");
      // Attempt to reconnect if failed
      if (!setupWiFi()) {
        Serial.println("Error: WiFi reconnection failed");
      }
    }
    
    lastSendTime = millis();
  }
}
